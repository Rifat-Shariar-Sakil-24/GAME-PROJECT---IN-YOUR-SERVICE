
bool upper_and_lower_collision_detection(int brick_number)
{
	bool brick_vanish = 0;

	if (ball_dy < 0)
	{
		if (ball_y - ball_radius + ball_dy - brick[brick_number].brick_y >= eps && ball_y - ball_radius + ball_dy - brick[brick_number].brick_y - brick_height <= eps) 
		brick_vanish = 1;
	}

	else if (ball_dy>0)
	{
		
		if ((brick[brick_number].brick_y + brick_height) - (ball_y + ball_radius + ball_dy) >= eps && ball_y + ball_radius + ball_dy - brick[brick_number].brick_y >= eps) 
		brick_vanish = 1;
	}


	if (brick_vanish)
	{
		
		double new_ball_dy; 

		if (ball_dy < 0){ new_ball_dy = -(ball_y - ball_radius - brick[brick_number].brick_y - brick_height); }
		else{ new_ball_dy = abs(ball_y + ball_radius - brick[brick_number].brick_y); }
		
		double new_ball_dx = (ball_dx*new_ball_dy) / ball_dy; 

		if (ball_dx<0) 	ball_x -= abs(new_ball_dx);
		else ball_x += abs(new_ball_dx);

		if (ball_dy<0) ball_y -= abs(new_ball_dy);
		else ball_y += abs(new_ball_dy);

		brick_exact_vangse_y_axis = brick_number + 1;
		return 1;

	}

	return 0;
}

